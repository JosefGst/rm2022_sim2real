# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_x_habitat/EvalEpisodeRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class EvalEpisodeRequest(genpy.Message):
  _md5sum = "7ac0e35740d3cb94d954674abbd9cf6c"
  _type = "ros_x_habitat/EvalEpisodeRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string episode_id_last
string scene_id_last
"""
  __slots__ = ['episode_id_last','scene_id_last']
  _slot_types = ['string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       episode_id_last,scene_id_last

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EvalEpisodeRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.episode_id_last is None:
        self.episode_id_last = ''
      if self.scene_id_last is None:
        self.scene_id_last = ''
    else:
      self.episode_id_last = ''
      self.scene_id_last = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.episode_id_last
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.scene_id_last
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.episode_id_last = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.episode_id_last = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.scene_id_last = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.scene_id_last = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.episode_id_last
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.scene_id_last
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.episode_id_last = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.episode_id_last = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.scene_id_last = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.scene_id_last = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_x_habitat/EvalEpisodeResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class EvalEpisodeResponse(genpy.Message):
  _md5sum = "493793cd7bc05e29a188144407a41392"
  _type = "ros_x_habitat/EvalEpisodeResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string episode_id
string scene_id
float32 distance_to_goal
float32 success
float32 spl
int32 num_steps
float32 agent_time
float32 sim_time
float32 reset_time

"""
  __slots__ = ['episode_id','scene_id','distance_to_goal','success','spl','num_steps','agent_time','sim_time','reset_time']
  _slot_types = ['string','string','float32','float32','float32','int32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       episode_id,scene_id,distance_to_goal,success,spl,num_steps,agent_time,sim_time,reset_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EvalEpisodeResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.episode_id is None:
        self.episode_id = ''
      if self.scene_id is None:
        self.scene_id = ''
      if self.distance_to_goal is None:
        self.distance_to_goal = 0.
      if self.success is None:
        self.success = 0.
      if self.spl is None:
        self.spl = 0.
      if self.num_steps is None:
        self.num_steps = 0
      if self.agent_time is None:
        self.agent_time = 0.
      if self.sim_time is None:
        self.sim_time = 0.
      if self.reset_time is None:
        self.reset_time = 0.
    else:
      self.episode_id = ''
      self.scene_id = ''
      self.distance_to_goal = 0.
      self.success = 0.
      self.spl = 0.
      self.num_steps = 0
      self.agent_time = 0.
      self.sim_time = 0.
      self.reset_time = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.episode_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.scene_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3fi3f().pack(_x.distance_to_goal, _x.success, _x.spl, _x.num_steps, _x.agent_time, _x.sim_time, _x.reset_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.episode_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.episode_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.scene_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.scene_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.distance_to_goal, _x.success, _x.spl, _x.num_steps, _x.agent_time, _x.sim_time, _x.reset_time,) = _get_struct_3fi3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.episode_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.scene_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3fi3f().pack(_x.distance_to_goal, _x.success, _x.spl, _x.num_steps, _x.agent_time, _x.sim_time, _x.reset_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.episode_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.episode_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.scene_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.scene_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.distance_to_goal, _x.success, _x.spl, _x.num_steps, _x.agent_time, _x.sim_time, _x.reset_time,) = _get_struct_3fi3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3fi3f = None
def _get_struct_3fi3f():
    global _struct_3fi3f
    if _struct_3fi3f is None:
        _struct_3fi3f = struct.Struct("<3fi3f")
    return _struct_3fi3f
class EvalEpisode(object):
  _type          = 'ros_x_habitat/EvalEpisode'
  _md5sum = '4cf4a4cf4a1d60db72496f8e3635a2d3'
  _request_class  = EvalEpisodeRequest
  _response_class = EvalEpisodeResponse
