// Generated by gencpp from file ros_x_habitat/EvalEpisodeResponse.msg
// DO NOT EDIT!


#ifndef ROS_X_HABITAT_MESSAGE_EVALEPISODERESPONSE_H
#define ROS_X_HABITAT_MESSAGE_EVALEPISODERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_x_habitat
{
template <class ContainerAllocator>
struct EvalEpisodeResponse_
{
  typedef EvalEpisodeResponse_<ContainerAllocator> Type;

  EvalEpisodeResponse_()
    : episode_id()
    , scene_id()
    , distance_to_goal(0.0)
    , success(0.0)
    , spl(0.0)
    , num_steps(0)
    , agent_time(0.0)
    , sim_time(0.0)
    , reset_time(0.0)  {
    }
  EvalEpisodeResponse_(const ContainerAllocator& _alloc)
    : episode_id(_alloc)
    , scene_id(_alloc)
    , distance_to_goal(0.0)
    , success(0.0)
    , spl(0.0)
    , num_steps(0)
    , agent_time(0.0)
    , sim_time(0.0)
    , reset_time(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _episode_id_type;
  _episode_id_type episode_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _scene_id_type;
  _scene_id_type scene_id;

   typedef float _distance_to_goal_type;
  _distance_to_goal_type distance_to_goal;

   typedef float _success_type;
  _success_type success;

   typedef float _spl_type;
  _spl_type spl;

   typedef int32_t _num_steps_type;
  _num_steps_type num_steps;

   typedef float _agent_time_type;
  _agent_time_type agent_time;

   typedef float _sim_time_type;
  _sim_time_type sim_time;

   typedef float _reset_time_type;
  _reset_time_type reset_time;





  typedef boost::shared_ptr< ::ros_x_habitat::EvalEpisodeResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_x_habitat::EvalEpisodeResponse_<ContainerAllocator> const> ConstPtr;

}; // struct EvalEpisodeResponse_

typedef ::ros_x_habitat::EvalEpisodeResponse_<std::allocator<void> > EvalEpisodeResponse;

typedef boost::shared_ptr< ::ros_x_habitat::EvalEpisodeResponse > EvalEpisodeResponsePtr;
typedef boost::shared_ptr< ::ros_x_habitat::EvalEpisodeResponse const> EvalEpisodeResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_x_habitat::EvalEpisodeResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_x_habitat::EvalEpisodeResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_x_habitat::EvalEpisodeResponse_<ContainerAllocator1> & lhs, const ::ros_x_habitat::EvalEpisodeResponse_<ContainerAllocator2> & rhs)
{
  return lhs.episode_id == rhs.episode_id &&
    lhs.scene_id == rhs.scene_id &&
    lhs.distance_to_goal == rhs.distance_to_goal &&
    lhs.success == rhs.success &&
    lhs.spl == rhs.spl &&
    lhs.num_steps == rhs.num_steps &&
    lhs.agent_time == rhs.agent_time &&
    lhs.sim_time == rhs.sim_time &&
    lhs.reset_time == rhs.reset_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_x_habitat::EvalEpisodeResponse_<ContainerAllocator1> & lhs, const ::ros_x_habitat::EvalEpisodeResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_x_habitat

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_x_habitat::EvalEpisodeResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_x_habitat::EvalEpisodeResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_x_habitat::EvalEpisodeResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_x_habitat::EvalEpisodeResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_x_habitat::EvalEpisodeResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_x_habitat::EvalEpisodeResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_x_habitat::EvalEpisodeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "493793cd7bc05e29a188144407a41392";
  }

  static const char* value(const ::ros_x_habitat::EvalEpisodeResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x493793cd7bc05e29ULL;
  static const uint64_t static_value2 = 0xa188144407a41392ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_x_habitat::EvalEpisodeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_x_habitat/EvalEpisodeResponse";
  }

  static const char* value(const ::ros_x_habitat::EvalEpisodeResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_x_habitat::EvalEpisodeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string episode_id\n"
"string scene_id\n"
"float32 distance_to_goal\n"
"float32 success\n"
"float32 spl\n"
"int32 num_steps\n"
"float32 agent_time\n"
"float32 sim_time\n"
"float32 reset_time\n"
"\n"
;
  }

  static const char* value(const ::ros_x_habitat::EvalEpisodeResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_x_habitat::EvalEpisodeResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.episode_id);
      stream.next(m.scene_id);
      stream.next(m.distance_to_goal);
      stream.next(m.success);
      stream.next(m.spl);
      stream.next(m.num_steps);
      stream.next(m.agent_time);
      stream.next(m.sim_time);
      stream.next(m.reset_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EvalEpisodeResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_x_habitat::EvalEpisodeResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_x_habitat::EvalEpisodeResponse_<ContainerAllocator>& v)
  {
    s << indent << "episode_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.episode_id);
    s << indent << "scene_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.scene_id);
    s << indent << "distance_to_goal: ";
    Printer<float>::stream(s, indent + "  ", v.distance_to_goal);
    s << indent << "success: ";
    Printer<float>::stream(s, indent + "  ", v.success);
    s << indent << "spl: ";
    Printer<float>::stream(s, indent + "  ", v.spl);
    s << indent << "num_steps: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_steps);
    s << indent << "agent_time: ";
    Printer<float>::stream(s, indent + "  ", v.agent_time);
    s << indent << "sim_time: ";
    Printer<float>::stream(s, indent + "  ", v.sim_time);
    s << indent << "reset_time: ";
    Printer<float>::stream(s, indent + "  ", v.reset_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_X_HABITAT_MESSAGE_EVALEPISODERESPONSE_H
